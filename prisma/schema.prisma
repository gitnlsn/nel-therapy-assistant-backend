// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                      String                   @id @default(uuid())
  name                    String
  notes                   PatientNote[]
  appointments            Appointment[]
  recordingTranscriptions RecordingTranscription[]
}

model PatientNote {
  id String @id @default(uuid())

  text String

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
}

enum AppointmentStatus {
  scheduled
  done
  canceled
  deleted
}

model Appointment {
  id String @id @default(uuid())

  date     DateTime
  // Duration in seconds
  duration Int
  status   AppointmentStatus

  appointmentNotes AppointmentNote[]

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
}

model AppointmentNote {
  id String @id @default(uuid())

  text String

  appintment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
}

// Transcription is a model composed of original speeches and highlighted speeches
model RecordingTranscription {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  date        DateTime
  duration    Int // Duration in seconds
  description String

  speeches TranscriptionSpeech[]

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  originalRef TranscriptionEdition[] @relation("original")
  editionRef  TranscriptionEdition[] @relation("edition")
}

// Transcriptions speeches are the original speeches inserted throught transcription
model TranscriptionSpeech {
  id String @id @default(uuid())

  text String
  date DateTime

  notes SpeechNote[]
  marks SpeechMark[]

  transcription            RecordingTranscription @relation(fields: [recordingTranscriptionId], references: [id], onDelete: Cascade)
  recordingTranscriptionId String
}

enum SpeechMark {
  star
  saved
  important
  ignore
}

model SpeechNote {
  id String @id @default(uuid())

  text String

  transcriptionSpeech   TranscriptionSpeech? @relation(fields: [transcriptionSpeechId], references: [id])
  transcriptionSpeechId String?
}

model TranscriptionEdition {
  id String @id @default(uuid())

  original                RecordingTranscription @relation("original", fields: [originalTranscriptionId], references: [id], onDelete: Cascade)
  edition                 RecordingTranscription @relation("edition", fields: [editionTranscriptionId], references: [id], onDelete: Cascade)
  originalTranscriptionId String
  editionTranscriptionId  String
}
